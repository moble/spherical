# Copyright (c) 2021, Michael Boyle
# See LICENSE file for details: <https://github.com/moble/spherical/blob/master/LICENSE>

import numpy as np
from .. import jit
# from .complex_powers import complex_powers
# from .wigner3j import Wigner3jCalculator, Wigner3j, clebsch_gordan
# from .wignerH import HCalculator



@jit
def quaternion_angles(R):
    """Compute complex angles for use in Wigner's ùîá matrices

    Assuming the Euler angle convention from the quaternions package, we can define

        z·µ¶ ‚âî exp[iŒ≤]
        z‚Çö ‚âî exp[i(Œ±+Œ≥)/2]
        z‚Çò ‚âî exp[i(Œ±-Œ≥)/2]

    It so happens that these combinations can be calculated algebraically from
    components of a quaternion, and are important terms in computing Wigner's ùîá
    matrices.

    """
    a = R[0]**2 + R[3]**2
    b = R[1]**2 + R[2]**2
    sqrta = np.sqrt(a)
    sqrtb = np.sqrt(b)
    z·µ¶ = ((a - b) + 2j * sqrta * sqrtb) / (a + b)  # exp[iŒ≤]
    if sqrta > 0.0:
        z‚Çö = (R[0] + 1j * R[3]) / sqrta  # exp[i(Œ±+Œ≥)/2]
    else:
        z‚Çö = 1.0 + 0.0j
    if abs(sqrtb) > 0.0:
        z‚Çò = (R[2] - 1j * R[1]) / sqrtb  # exp[i(Œ±-Œ≥)/2]
    else:
        z‚Çò = 1.0 +0.0j
    return z·µ¶, z‚Çö, z‚Çò


def rotate(modes, R):
    """Rotate Modes object by rotor(s)

    Compute f‚Çó‚Çò = Œ£‚Çô f‚Çó‚Çô ùîáÀ°‚Çô‚Çò(R), where f is a (possibly spin-weighted) function, f‚Çó‚Çô are its mode
    weights in the current frame, and f‚Çó‚Çò are its mode weights in the rotated frame.

    f‚Çó‚Çò = Œ£‚Çô f‚Çó‚Çô ùîáÀ°‚Çô‚Çò(R)
        = Œ£‚Çô f‚Çó‚Çô dÀ°‚Çô‚Çò(R) exp[iœï‚Çê(m-n)+iœï‚Çõ(m+n)]
        = Œ£‚Çô f‚Çó‚Çô dÀ°‚Çô‚Çò(R) exp[i(œï‚Çõ+œï‚Çê)m+i(œï‚Çõ-œï‚Çê)n]
        = exp[i(œï‚Çõ+œï‚Çê)m] Œ£‚Çô f‚Çó‚Çô dÀ°‚Çô‚Çò(R) exp[i(œï‚Çõ-œï‚Çê)n]
        = z‚Çö·µê Œ£‚Çô f‚Çó‚Çô dÀ°‚Çô‚Çò(R) z‚Çò‚Åø
        = z‚Çö·µê {f‚Çó‚ÇÄ dÀ°‚ÇÄ‚Çò(R) + Œ£‚Çö‚Çô [f‚Çó‚Çô dÀ°‚Çô‚Çò(R) z‚Çò‚Åø + f‚Çó‚Çã‚Çô dÀ°‚Çã‚Çô‚Çò(R) / z‚Çò‚Åø]}
        = z‚Çö·µê {f‚Çó‚ÇÄ œµ‚Çã‚Çò HÀ°‚ÇÄ‚Çò(R) + Œ£‚Çö‚Çô [f‚Çó‚Çô œµ‚Çô œµ‚Çã‚Çò HÀ°‚Çô‚Çò(R) z‚Çò‚Åø + f‚Çó‚Çã‚Çô œµ‚Çã‚Çô œµ‚Çã‚Çò HÀ°‚Çã‚Çô‚Çò(R) / z‚Çò‚Åø]}
        = œµ‚Çã‚Çò z‚Çö·µê {f‚Çó‚ÇÄ HÀ°‚ÇÄ‚Çò(R) + Œ£‚Çö‚Çô [f‚Çó‚Çô (-1)‚Åø HÀ°‚Çô‚Çò(R) z‚Çò‚Åø + f‚Çó‚Çã‚Çô HÀ°‚Çã‚Çô‚Çò(R) / z‚Çò‚Åø]}

    Here, n ranges over [-l, l] and pn ranges over [1, l].

    Parameters
    ==========
    modes: Modes
        SWSH modes to rotate
    R: quaternionic.array
        Its shape must satifsy R.shape[:-1] == modes.shape[:-1]

    """
    import quaternionic

    f‚Çó‚Çô = modes.reshape((np.prod(modes.shape[:-1], dtype=int), modes.shape[-1]))
    f‚Çó‚Çò = np.zeros_like(modes)
    ell_min = modes.ell_min
    ell_max = modes.ell_max

    if not isinstance(R, quaternionic.array) and R.shape != modes.shape[:-1]:
        raise ValueError(
            f"Input rotor must be either a single quaternion or an array with\n"
            f"shape R.shape={R.shape} == modes.shape[:-1]={modes.shape[:-1]}"
        )

    rotors = quaternionic.array(R).ndarray.reshape((-1, 4))

#unfinished:
    raise NotImplementedError()
    #first_slice = slice(None) if rotors.shape[0]==1 else ?

    for i·µ£ in range(rotors.shape[0]):
        z·µ¶, z‚Çö, z‚Çò = quaternion_angles(rotors[i])

        # Compute H elements (basically Wigner's d functions)
        HÀ°‚Çô‚Çò = H(z·µ¶.real, z·µ¶.imag, workspace)

        # Pre-compute z‚Çö·µê=exp[i(œï‚Çõ+œï‚Çê)m] for all values of m
        z‚Çö·µê = complex_powers(z‚Çö, ell_max)

        for ell in range(ell_min, ell_max+1):
            for m in range(-ell_max, ell_max+1):
                # f‚Çó‚Çò = œµ‚Çã‚Çò z‚Çö·µê {f‚Çó‚ÇÄ HÀ°‚ÇÄ‚Çò(R) + Œ£‚Çö‚Çô [f‚Çó‚Çã‚Çô HÀ°‚Çã‚Çô‚Çò(R) / z‚Çò‚Åø + f‚Çó‚Çô (-1)‚Åø HÀ°‚Çô‚Çò(R) z‚Çò‚Åø]}
                i‚Çò = f‚Çó‚Çò.index(ell, m)

                # Initialize with n=0 term
                f‚Çó‚Çò[first_slice, i‚Çò] = f‚Çó‚Çô[f‚Çó‚Çô.index(ell, 0)] * HÀ°‚Çô‚Çò.element(ell, 0, m)

                # Compute dÀ°‚Çô‚Çò terms recursively for 0<n<l, using symmetries for negative n, and
                # simultaneously add the mode weights times z‚Çò‚Åø=exp[i(œï‚Çõ-œï‚Çê)n] to the result using
                # Horner form
                negative_terms[first_slice] = f‚Çó‚Çô[first_slice, f‚Çó‚Çô.index(ell, -ell)] * HÀ°‚Çô‚Çò.element(ell, -ell, m)
                positive_terms[first_slice] = f‚Çó‚Çô[first_slice, f‚Çó‚Çô.index(ell, ell)] * HÀ°‚Çô‚Çò.element(ell, ell, m) * (-1)**ell
                for n in range(ell-1, 0, -1):
                    negative_terms /= z‚Çò
                    negative_terms += f‚Çó‚Çô[first_slice, f‚Çó‚Çô.index(ell, -n)] * HÀ°‚Çô‚Çò.element(ell, -n, m)
                    positive_terms *= z‚Çò
                    positive_terms += f‚Çó‚Çô[first_slice, f‚Çó‚Çô.index(ell, n)] * HÀ°‚Çô‚Çò.element(ell, n, m) * (-1)**n
                f‚Çó‚Çò[first_slice, i‚Çò] += negative_terms / z‚Çò
                f‚Çó‚Çò[first_slice, i‚Çò] += positive_terms * z‚Çò

                # Finish calculation of f‚Çó‚Çò by multiplying by z‚Çö·µê=exp[i(œï‚Çõ+œï‚Çê)m]
                f‚Çó‚Çò[first_slice, i‚Çò] *= œµ(-m) * z‚Çö·µê[m]

    f‚Çó‚Çò = f‚Çó‚Çò.reshape(modes.shape)
    return f‚Çó‚Çò
